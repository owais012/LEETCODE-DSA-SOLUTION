class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        int inDegree[] = new int[V];
        
        for(int i =0; i < adj.size(); i++){
            for(int j =0; j < adj.get(i).size(); j++){
                inDegree[adj.get(i).get(j)]++;
            }
        }
        
        Queue<Integer> q = new LinkedList<>();
        
        for(int i =0; i < inDegree.length; i++){
            if(inDegree[i]  == 0){
                q.add(i);
            }
        }
        
        while(!q.isEmpty()){
            int node = q.poll();
            
            for(Integer it: adj.get(node)){
                inDegree[it]--;
                if(inDegree[it] == 0) q.add(it);
            }
        }
        
        for(int i =0; i < inDegree.length; i++){
            if(inDegree[i]  > 0) return true;
             
        }
        
        return false;
    }
}
